//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                  String             @id() @default(uuid())
  name                String?
  email               String?            @unique()
  pictureUrl          String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation     String?
  stripeCustomerId    String?
  status              UserStatus         @default(VERIFIED)
  globalRole          String             @default("USER")
  /// @password
  /// @omit
  password            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt()
  organizationRoles   OrganizationRole[]
  pwaSubscriptions    PwaSubscription[]  @relation("user")
  userRoles           UserRole[]         @relation("user")
  tasksAsAssignedUser Task[]             @relation("assignedUser")
  timeEntrys          TimeEntry[]        @relation("user")
  expenses            Expense[]          @relation("user")
  knowledgeArticles   KnowledgeArticle[]
  articleVersions     KnowledgeArticleVersion[]
  precedentDocuments  PrecedentDocument[]
  documentTemplates   DocumentTemplate[]
  templateVersions    TemplateVersion[]
  approvedTemplates   DocumentTemplate[] @relation("TemplateApprover")
  contributions       UserContribution[]
  comments            KnowledgeComment[]
  recommendations     Recommendation[]
}

/// @@allow('all', true)
model RoleData {
  id          String     @id() @default(uuid())
  name        String
  description String?
  userRoles   UserRole[] @relation("role")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserRole {
  userId    String
  user      User?     @relation(fields: [userId], references: [id], name: "user")
  roleId    String
  role      RoleData? @relation(fields: [roleId], references: [id], name: "role")
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Client {
  id             String        @id() @default(uuid())
  name           String
  email          String?
  phone          String?
  address        String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  matters        Matter[]      @relation("client")
  invoices       Invoice[]     @relation("client")
  stripeCustomerId String?     // For client payments
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Matter {
  id             String        @id() @default(uuid())
  title          String
  description    String?
  status         String?
  clientId       String
  client         Client?       @relation(fields: [clientId], references: [id], name: "client")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  tasks          Task[]        @relation("matter")
  timeEntrys     TimeEntry[]   @relation("matter")
  expenses       Expense[]     @relation("matter")
  precedentDocuments PrecedentDocument[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
  knowledgeArticles KnowledgeArticle[]
}

/// @@allow('all', true)
model Task {
  id             String      @id() @default(uuid())
  title          String
  description    String?
  status         String?
  dueDate        String?
  assignedUserId String?
  assignedUser   User?       @relation(fields: [assignedUserId], references: [id], name: "assignedUser")
  matterId       String
  matter         Matter?     @relation(fields: [matterId], references: [id], name: "matter")
  timeEntrys     TimeEntry[] @relation("task")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TimeEntry {
  id             String   @id @default(cuid())
  organizationId String
  matterId       String
  startTime      DateTime
  endTime        DateTime
  description    String
  activities     String[]
  isAIGenerated  Boolean  @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  matter         Matter      @relation(fields: [matterId], references: [id])

  @@index([organizationId])
  @@index([matterId])
  @@index([startTime])
  @@index([endTime])
}

/// @@allow('all', true)
model Expense {
  id          String   @id() @default(uuid())
  description String?
  amount      String?
  date        String?
  receiptUrl  String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  matterId    String
  matter      Matter?  @relation(fields: [matterId], references: [id], name: "matter")
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id], name: "invoice")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Invoice {
  id              String        @id() @default(uuid())
  invoiceNumber   String        @unique
  clientId        String
  client          Client?       @relation(fields: [clientId], references: [id], name: "client")
  matterId        String
  matter          Matter?       @relation(fields: [matterId], references: [id], name: "matter")
  organizationId  String
  organization    Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  amount          String
  tax             String?
  total           String
  status          String        @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  dueDate         String?
  notes           String?
  timeEntries     TimeEntry[]   @relation("invoice")
  expenses        Expense[]     @relation("invoice")
  payments        Payment[]     @relation("invoice")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Payment {
  id              String        @id() @default(uuid())
  invoiceId       String
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id], name: "invoice")
  amount          String
  paymentMethod   String        // CREDIT_CARD, BANK_TRANSFER, CHECK, CASH, OTHER
  paymentDate     String
  transactionId   String?
  status          String        @default("COMPLETED") // PENDING, COMPLETED, FAILED, REFUNDED
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  stripePublicKey  String?            // For client-side Stripe integration
  stripeSecretKey  String?            // For server-side Stripe integration
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  clients          Client[]           @relation("organization")
  matters          Matter[]           @relation("organization")
  invoices         Invoice[]          @relation("organization")
  knowledgeArticles KnowledgeArticle[]
  precedentDocuments PrecedentDocument[]
  documentTemplates DocumentTemplate[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}

model Activity {
  id             String   @id @default(cuid())
  organizationId String
  type           String
  content        String
  matterId       String?
  duration       Int
  timestamp      DateTime @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  matter         Matter?      @relation(fields: [matterId], references: [id])

  @@index([organizationId])
  @@index([matterId])
  @@index([timestamp])
}

// Knowledge Management Models
model KnowledgeArticle {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  practiceAreaId String
  practiceArea  PracticeArea @relation(fields: [practiceAreaId], references: [id])
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  versions      KnowledgeArticleVersion[]
  tags          String[]
  viewCount     Int         @default(0)
  contributors  UserContribution[]
  comments      KnowledgeComment[]
}

model KnowledgeArticleVersion {
  id            String      @id @default(cuid())
  articleId     String
  article       KnowledgeArticle @relation(fields: [articleId], references: [id])
  content       String      @db.Text
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  createdAt     DateTime    @default(now())
  changeLog     String      @db.Text
}

model PrecedentDocument {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  matterId      String?
  matter        Matter?     @relation(fields: [matterId], references: [id])
  documentType  String
  practiceAreaId String
  practiceArea  PracticeArea @relation(fields: [practiceAreaId], references: [id])
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  metadata      Json
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  citations     Citation[]
  relatedPrecedents PrecedentRelation[] @relation("SourcePrecedent")
  referencedBy     PrecedentRelation[] @relation("TargetPrecedent")
  successRate    Float?
  usageCount     Int         @default(0)
}

model PrecedentRelation {
  id            String      @id @default(cuid())
  sourcePrecedentId String
  sourcePrecedent PrecedentDocument @relation("SourcePrecedent", fields: [sourcePrecedentId], references: [id])
  targetPrecedentId String
  targetPrecedent PrecedentDocument @relation("TargetPrecedent", fields: [targetPrecedentId], references: [id])
  relationType   String
  createdAt     DateTime    @default(now())
}

model Citation {
  id            String      @id @default(cuid())
  precedentId   String
  precedent     PrecedentDocument @relation(fields: [precedentId], references: [id])
  citation      String
  context       String      @db.Text
  createdAt     DateTime    @default(now())
}

model DocumentTemplate {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  practiceAreaId String
  practiceArea  PracticeArea @relation(fields: [practiceAreaId], references: [id])
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  documentType  String
  guidance      String      @db.Text
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  versions      TemplateVersion[]
  usageCount    Int         @default(0)
  successRate   Float?
  status        String      @default("draft") // draft, review, approved
  approvedById  String?
  approvedBy    User?       @relation("TemplateApprover", fields: [approvedById], references: [id])
}

model TemplateVersion {
  id            String      @id @default(cuid())
  templateId    String
  template      DocumentTemplate @relation(fields: [templateId], references: [id])
  content       String      @db.Text
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  createdAt     DateTime    @default(now())
  changeLog     String      @db.Text
}

model UserContribution {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  articleId     String
  article       KnowledgeArticle @relation(fields: [articleId], references: [id])
  contributionType String
  createdAt     DateTime    @default(now())
}

model KnowledgeComment {
  id            String      @id @default(cuid())
  articleId     String
  article       KnowledgeArticle @relation(fields: [articleId], references: [id])
  content       String      @db.Text
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SearchIndex {
  id            String      @id @default(cuid())
  contentId     String
  contentType   String
  indexedText   String      @db.Text
  metadata      Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([contentType, contentId])
  @@index([indexedText])
}

model Recommendation {
  id            String      @id @default(cuid())
  contentId     String
  contentType   String
  contextId     String
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  accepted      Boolean?
  createdAt     DateTime    @default(now())

  @@index([userId, contextId])
  @@index([contentType, contentId])
}

model PracticeArea {
  id             String        @id() @default(uuid())
  title          String
  description    String?
  knowledgeArticles KnowledgeArticle[]
  precedentDocuments PrecedentDocument[]
  documentTemplates DocumentTemplate[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}
