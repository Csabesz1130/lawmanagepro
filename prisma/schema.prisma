//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

enum IntakeFieldType {
    TEXT
    TEXTAREA
    NUMBER
    DATE
    SELECT
    MULTISELECT
    CHECKBOX
    RADIO
    FILE
    SIGNATURE
    SECTION_BREAK
}

enum IntakeSubmissionStatus {
    PENDING
    IN_PROGRESS
    SUBMITTED
    UNDER_REVIEW
    REQUIRES_CLIENT_ACTION
    APPROVED
    REJECTED
    ARCHIVED
}

enum ComplianceCheckType {
    CONFLICT
    KYC_AML
    RESTRICTED_PARTY
}

enum ComplianceCheckStatus {
    PENDING
    PASSED
    FAILED
    NEEDS_REVIEW
}

enum WorkflowStatus {
    NOT_STARTED
    IN_PROGRESS
    STALLED
    COMPLETED
    CANCELLED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
    id String @id() @default(uuid())
    name String?
    email String? @unique()
    pictureUrl String? @default("https://i.imgur.com/ZdJSK3Y.jpeg")
    tokenInvitation String?
    stripeCustomerId String?
    status UserStatus @default(VERIFIED)
    globalRole String @default("USER")
  /// @password
  /// @omit
    password String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
    organizationRoles OrganizationRole[]
    pwaSubscriptions PwaSubscription[] @relation("user")
    userRoles UserRole[] @relation("user")
    tasksAsAssignedUser Task[] @relation("assignedUser")
    timeEntrys TimeEntry[] @relation("user")
    expenses Expense[] @relation("user")
    assignedIntakeSubmissions IntakeSubmission[] @relation("assignedUser")
    checkedComplianceChecks ComplianceCheck[] @relation("checkedByUser")
}

/// @@allow('all', true)
model RoleData {
    id String @id() @default(uuid())
    name String
  description String?
    userRoles UserRole[] @relation("role")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
}

/// @@allow('all', true)
model UserRole {
    userId String
    user User? @relation(fields: [userId], references: [id], name: "user")
    roleId String
    role RoleData? @relation(fields: [roleId], references: [id], name: "role")
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
}

/// @@allow('all', true)
model Client {
    id String @id() @default(uuid())
    name String
    email String?
    phone String?
    address String?
  organizationId String
    organization Organization? @relation(fields: [organizationId], references: [id], name: "organization")
    matters Matter[] @relation("client")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
    intakeSubmissions IntakeSubmission[] @relation("client")
}

/// @@allow('all', true)
model Matter {
    id          String       @id @default(cuid())
    title       String
    description String?
    status      String       @default("active")
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    timeEntries TimeEntry[]
    notes       Note[]
    events      Event[]
    documents   Document[]
    contacts    Contact[]
}

/// @@allow('all', true)
model Task {
    id String @id() @default(uuid())
    title String
    description String?
    status String?
    dueDate String?
  assignedUserId String?
    assignedUser User? @relation(fields: [assignedUserId], references: [id], name: "assignedUser")
    matterId String
    matter Matter? @relation(fields: [matterId], references: [id], name: "matter")
    timeEntrys TimeEntry[] @relation("task")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
}

/// @@allow('all', true)
model TimeEntry {
    id          String   @id @default(cuid())
    matterId    String
    matter      Matter   @relation(fields: [matterId], references: [id])
    startTime   DateTime
    endTime     DateTime?
    duration    Int?
  description String?
  createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

/// @@allow('all', true)
model Expense {
    id String @id() @default(uuid())
  description String?
    amount String?
    date String?
    receiptUrl String?
    userId String
    user User? @relation(fields: [userId], references: [id], name: "user")
    matterId String
    matter Matter? @relation(fields: [matterId], references: [id], name: "matter")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
    id String @id() @default(uuid())
    name String
    pictureUrl String? @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
    roles OrganizationRole[]
    clients Client[] @relation("organization")
    matters Matter[] @relation("organization")
    intakeForms IntakeForm[] @relation("organization")
    intakeSubmissions IntakeSubmission[] @relation("organization")
    intakeWorkflowTemplates IntakeWorkflowTemplate[] @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
    id String @id() @default(uuid())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
    userId String
    user User @relation(fields: [userId], references: [id])
  organizationId String
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
    id String @id() @default(uuid())
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
    userId String
    user User @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', true)
model IntakeForm {
    id String @id() @default(cuid())
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id], name: "organization")
    name String
    description String?
    practiceAreaId String?
    practiceArea PracticeArea? @relation(fields: [practiceAreaId], references: [id])
    version Int @default(1)
    fieldsSchema Json @db.JsonB()
    conditionsSchema Json? @db.JsonB()
    isActive Boolean @default(true)
    fields IntakeFormField[]
    submissions IntakeSubmission[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    @@index([organizationId])
    @@index([practiceAreaId])
}

/// @@allow('all', true)
model IntakeFormField {
    id String @id() @default(cuid())
    formId String
    form IntakeForm @relation(fields: [formId], references: [id])
    order Int
    label String
    type IntakeFieldType
    options Json? @db.JsonB()
    isRequired Boolean @default(false)
    conditionalDisplayLogic Json? @db.JsonB()
    placeholderText String?
    helpText String?
    submissionFiles IntakeSubmissionFile[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    @@index([formId])
}

/// @@allow('all', true)
model IntakeSubmission {
    id String @id() @default(cuid())
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id], name: "organization")
    formId String
    form IntakeForm @relation(fields: [formId], references: [id])
    formVersion Int
    formData Json @db.JsonB()
    status IntakeSubmissionStatus @default(PENDING)
    submittedAt DateTime?
    startedAt DateTime @default(now())
    lastUpdatedAt DateTime @updatedAt() @default(now())
    assignedUserId String?
    assignedUser User? @relation(fields: [assignedUserId], references: [id], name: "assignedUser")
    clientId String?
    client Client? @relation(fields: [clientId], references: [id], name: "client")
    matterId String?
    matter Matter? @relation(fields: [matterId], references: [id], name: "matter")
    externalClientId String?
    files IntakeSubmissionFile[]
    complianceChecks ComplianceCheck[]
    workflowInstance IntakeWorkflowInstance?
    createdAt DateTime @default(now())

    @@index([organizationId])
    @@index([formId])
    @@index([clientId])
    @@index([matterId])
    @@index([assignedUserId])
}

/// @@allow('all', true)
model IntakeSubmissionFile {
    id String @id() @default(cuid())
    submissionId String
    submission IntakeSubmission @relation(fields: [submissionId], references: [id])
    fieldId String
    field IntakeFormField @relation(fields: [fieldId], references: [id])
    fileName String
    storagePath String
    fileSize Int
    mimeType String
    uploadedAt DateTime @default(now())

    @@index([submissionId])
    @@index([fieldId])
}

/// @@allow('all', true)
model ComplianceCheck {
    id String @id() @default(cuid())
    submissionId String
    submission IntakeSubmission @relation(fields: [submissionId], references: [id])
    checkType ComplianceCheckType
    status ComplianceCheckStatus @default(PENDING)
    resultData Json? @db.JsonB()
    notes String? @db.Text()
    checkedAt DateTime?
    checkedByUserId String?
    checkedByUser User? @relation(fields: [checkedByUserId], references: [id], name: "checkedByUser")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    @@index([submissionId])
    @@index([checkedByUserId])
}

/// @@allow('all', true)
model IntakeWorkflowTemplate {
    id String @id() @default(cuid())
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id], name: "organization")
    name String
    description String?
    practiceAreaId String?
    practiceArea PracticeArea? @relation(fields: [practiceAreaId], references: [id])
    steps Json @db.JsonB()
    isActive Boolean @default(true)
    instances IntakeWorkflowInstance[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    @@index([organizationId])
    @@index([practiceAreaId])
}

/// @@allow('all', true)
model IntakeWorkflowInstance {
    id String @id() @default(cuid())
    templateId String
    template IntakeWorkflowTemplate @relation(fields: [templateId], references: [id])
    submissionId String @unique()
    submission IntakeSubmission @relation(fields: [submissionId], references: [id])
    currentStepIndex Int @default(0)
    status WorkflowStatus @default(NOT_STARTED)
    stepStatuses Json @db.JsonB()
    startedAt DateTime @default(now())
    completedAt DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    @@index([templateId])
    @@index([submissionId])
}

/// @@allow('all', true)
model PracticeArea {
    id String @id() @default(uuid())
    title String
    description String?
    intakeForms IntakeForm[]
    intakeWorkflowTemplates IntakeWorkflowTemplate[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())
}

/// @@allow('all', true)
model Note {
    id        String   @id @default(cuid())
    matterId  String
    matter    Matter   @relation(fields: [matterId], references: [id])
    title     String
  content   String
  createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// @@allow('all', true)
model Event {
    id          String   @id @default(cuid())
    matterId    String
    matter      Matter   @relation(fields: [matterId], references: [id])
    title       String
    description String?
    startTime   DateTime
    endTime     DateTime?
    location    String?
    attendees   String[]
    type        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

/// @@allow('all', true)
model Document {
    id        String   @id @default(cuid())
    matterId  String
    matter    Matter   @relation(fields: [matterId], references: [id])
    title     String
    content   String?
    fileUrl   String?
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// @@allow('all', true)
model Contact {
    id           String   @id @default(cuid())
    matterId     String
    matter       Matter   @relation(fields: [matterId], references: [id])
    name         String
    type         String
    email        String?
    phone        String?
    organization String?
    notes        String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}