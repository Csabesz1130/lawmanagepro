//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                  String             @id() @default(uuid())
  name                String?
  email               String?            @unique()
  pictureUrl          String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation     String?
  stripeCustomerId    String?
  status              UserStatus         @default(VERIFIED)
  globalRole          String             @default("USER")
  /// @password
  /// @omit
  password            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt()
  organizationRoles   OrganizationRole[]
  pwaSubscriptions    PwaSubscription[]  @relation("user")
  userRoles           UserRole[]         @relation("user")
  tasksAsAssignedUser Task[]             @relation("assignedUser")
  timeEntrys          TimeEntry[]        @relation("user")
  expenses            Expense[]          @relation("user")
}

/// @@allow('all', true)
model RoleData {
  id          String     @id() @default(uuid())
  name        String
  description String?
  userRoles   UserRole[] @relation("role")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserRole {
  userId    String
  user      User?     @relation(fields: [userId], references: [id], name: "user")
  roleId    String
  role      RoleData? @relation(fields: [roleId], references: [id], name: "role")
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Client {
  id             String        @id() @default(uuid())
  name           String
  email          String?
  phone          String?
  address        String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  matters        Matter[]      @relation("client")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Matter {
  id             String        @id() @default(uuid())
  title          String
  description    String?
  status         String?
  clientId       String
  client         Client?       @relation(fields: [clientId], references: [id], name: "client")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  tasks          Task[]        @relation("matter")
  timeEntrys     TimeEntry[]   @relation("matter")
  expenses       Expense[]     @relation("matter")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Task {
  id             String      @id() @default(uuid())
  title          String
  description    String?
  status         String?
  dueDate        String?
  assignedUserId String?
  assignedUser   User?       @relation(fields: [assignedUserId], references: [id], name: "assignedUser")
  matterId       String
  matter         Matter?     @relation(fields: [matterId], references: [id], name: "matter")
  timeEntrys     TimeEntry[] @relation("task")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TimeEntry {
  id          String   @id() @default(uuid())
  description String?
  startTime   String?
  endTime     String?
  duration    String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], name: "task")
  matterId    String
  matter      Matter?  @relation(fields: [matterId], references: [id], name: "matter")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Expense {
  id          String   @id() @default(uuid())
  description String?
  amount      String?
  date        String?
  receiptUrl  String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  matterId    String
  matter      Matter?  @relation(fields: [matterId], references: [id], name: "matter")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  clients          Client[]           @relation("organization")
  matters          Matter[]           @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
